install.packages("packagefinder")
packageDetails("ggplot2")
packagefinder::packageDetails("ggplot2")
x<-packageDetails("ggplot2")
x<-packagefinder::packageDetails("ggplot2")
x<-packagefinder::packageDetails("ggplot2",brief = T)
x<-packagefinder::packageDetails("ggplot2",brief = T)
results <- capture.output(packagefinder::packageDetails("ggplot2",brief = T))
install.packages("git2r")
install.packages("git2r")
clone_cheats_to_cache <- function(TEMP_PATH) {
# TEMP_PATH <- path.expand(create_cache_location())
# url <- "https://github.com/bradlindblad/foo"
url <- "https://github.com/rstudio/cheatsheets"
cli::cli_alert_success("Grabbing cheatsheets from {crayon::blue('https://rstudio.com/resources/cheatsheets/')}")
Sys.sleep(3)
cli::cli_alert_info("This may take 30 seconds or more...")
suppressMessages(
git2r::clone(url = url, local_path = path.expand(TEMP_PATH), progress = FALSE)
)
clone_cheats_to_cache <- function(TEMP_PATH) {
# TEMP_PATH <- path.expand(create_cache_location())
# url <- "https://github.com/bradlindblad/foo"
url <- "https://github.com/rstudio/cheatsheets"
cli::cli_alert_success("Grabbing cheatsheets from {crayon::blue('https://rstudio.com/resources/cheatsheets/')}")
Sys.sleep(3)
cli::cli_alert_info("This may take 30 seconds or more...")
suppressMessages(
git2r::clone(url = url, local_path = path.expand(TEMP_PATH), progress = FALSE)
)
}
clone_cheats_to_cache <- function(TEMP_PATH) {
# TEMP_PATH <- path.expand(create_cache_location())
# url <- "https://github.com/bradlindblad/foo"
url <- "https://github.com/rstudio/cheatsheets"
cli::cli_alert_success("Grabbing cheatsheets from {crayon::blue('https://rstudio.com/resources/cheatsheets/')}")
Sys.sleep(3)
cli::cli_alert_info("This may take 30 seconds or more...")
suppressMessages(
git2r::clone(url = url, local_path = path.expand(TEMP_PATH), progress = FALSE)
)
}
clone_cheats_to_cache(TEMP_PATH = "./git")
clone_cheats_to_cache <- function(TEMP_PATH) {
# TEMP_PATH <- path.expand(create_cache_location())
# url <- "https://github.com/bradlindblad/foo"
url <- "https://github.com/rstudio/cheatsheets"
url <- "https://github.com/business-science/cheatsheets"
cli::cli_alert_success("Grabbing cheatsheets from {crayon::blue('https://rstudio.com/resources/cheatsheets/')}")
Sys.sleep(3)
cli::cli_alert_info("This may take 30 seconds or more...")
suppressMessages(
git2r::clone(url = url, local_path = path.expand(TEMP_PATH), progress = FALSE)
)
}
clone_cheats_to_cache(TEMP_PATH = "./git")
clone_cheats_to_cache(TEMP_PATH = "./git2")
clone_cheats_to_cache <- function(TEMP_PATH, url = "https://github.com/business-science/cheatsheets") {
# TEMP_PATH <- path.expand(create_cache_location())
# url <- "https://github.com/bradlindblad/foo"
# url <-
# url <- "https://github.com/business-science/cheatsheets"
cli::cli_alert_success("Grabbing cheatsheets from {crayon::blue('https://rstudio.com/resources/cheatsheets/')}")
Sys.sleep(3)
cli::cli_alert_info("This may take 30 seconds or more...")
suppressMessages(
git2r::clone(url = url, local_path = path.expand(TEMP_PATH), progress = FALSE)
)
}
clone_cheats_to_cache(TEMP_PATH = "./git3")
cheatsheets <- as.data.frame(Provider = c("Rstudio","Business Science"),url = c("https://github.com/rstudio/cheatsheets","https://github.com/business-science/cheatsheets"))
cheatsheets <- data.frame(Provider = c("Rstudio","Business Science"),url = c("https://github.com/rstudio/cheatsheets","https://github.com/business-science/cheatsheets"))
dput(cheatsheets
)
y <- structure(list(Provider = c("Rstudio", "Business Science"), url = c("https://github.com/rstudio/cheatsheets",
"https://github.com/business-science/cheatsheets")), class = "data.frame", row.names = c(NA,
-2L))
library(devtools)
urls <- structure(list(Provider = c("Rstudio", "Business Science"),
url = c("https://github.com/rstudio/cheatsheets",
"https://github.com/business-science/cheatsheets")),
class = "data.frame",
row.names = c(NA, -2L))
usethis::use_data(urls)
load("C:/Users/Josia/Desktop/Coding Projects 2/cheatsheet/data/urls.rda")
mapply(rep, 1:4, 4:1)
cheatsheet::urls
load("C:/Users/Josia/Desktop/Coding Projects 2/cheatsheet/data/urls.rda")
cheatsheet::urls
get_cheatsheets <- function(local_path = ".", tidyverse_only = FALSE, provider, url, documented = FALSE) {
TEMP_PATH <- paste0(local_path, "/git")
clone_cheats_to_cache(TEMP_PATH, provider, url = url)
pdfs <- list.files(path = TEMP_PATH, pattern = "*.pdf", full.names = TRUE)
if(tidyverse_only == TRUE) {
tidy <- c(paste0(TEMP_PATH, "/", "data-visualization-2.1.pdf"),
paste0(TEMP_PATH, "/", "data-import.pdf"),
paste0(TEMP_PATH, "/", "data-transformation.pdf"),
paste0(TEMP_PATH, "/", "factors.pdf"),
paste0(TEMP_PATH, "/", "lubridate.pdf"),
paste0(TEMP_PATH, "/", "purrr.pdf"),
paste0(TEMP_PATH, "/", "tidyeval.pdf"),
paste0(TEMP_PATH, "/", "strings.pdf")
)
pdfs <- pdfs[pdfs %in% tidy]
}
suppressMessages(
purrr::map(pdfs, fs::file_copy, local_path)
)
fs::dir_delete(TEMP_PATH)
cli::cli_alert_success("Added cheatsheets to {crayon::blue(local_path)}")
if(documented == TRUE) {
cheatsheets <- data.frame(Provider = rep(provider,length(pdfs)),
url = rep(url,length(pdfs)),
cheatsheet = pdfs)
return(cheatsheets)
}
}
urls
urls %>% mapply(get_cheatsheets,
provider = cheatsheet::urls$Provider,
url = cheatsheet::urls$url,
tidyverse_only = tidyverse_only,
documented = documented)
library(magrittr)
urls %>% mapply(get_cheatsheets,
provider = cheatsheet::urls$Provider,
url = cheatsheet::urls$url,
tidyverse_only = tidyverse_only,
documented = documented)
get_cheatsheets(local_path = ".",tidyverse_only = FALSE,provider = "doesn't matter",url = "https://github.com/business-science/cheatsheets")
clone_cheats_to_cache <- function(TEMP_PATH, url = "https://github.com/rstudio/cheatsheets") {
# TEMP_PATH <- path.expand(create_cache_location())
# url <- "https://github.com/bradlindblad/foo"
# url <- "https://github.com/rstudio/cheatsheets"
# url <- "https://github.com/business-science/cheatsheets"
cli::cli_alert_success(paste0("Grabbing cheatsheets from {crayon::blue('",url,"')}"))
Sys.sleep(3)
cli::cli_alert_info("This may take 30 seconds or more...")
suppressMessages(
git2r::clone(url = url, local_path = path.expand(TEMP_PATH), progress = FALSE)
)
}
urls %>% mapply(get_cheatsheets,
provider = cheatsheet::urls$Provider,
url = cheatsheet::urls$url,
tidyverse_only = tidyverse_only,
documented = documented)
urls %>% mapply(FUN = get_cheatsheets,
provider = cheatsheet::urls$Provider,
url = cheatsheet::urls$url,
tidyverse_only = tidyverse_only,
documented = documented)
urls %>% mapply(FUN = get_cheatsheets,
provider = urls$Provider,
url = urls$url,
tidyverse_only = tidyverse_only,
documented = documented)
tidyverse_only = FALSE
documented = FALSE
urls %>% mapply(FUN = get_cheatsheets,
provider = urls$Provider,
url = urls$url,
tidyverse_only = tidyverse_only,
documented = documented)
get_cheatsheets <- function(local_path = ".", tidyverse_only = FALSE, provider, url, documented = FALSE) {
TEMP_PATH <- paste0(local_path, "/git")
clone_cheats_to_cache(TEMP_PATH,  url = url)
pdfs <- list.files(path = TEMP_PATH, pattern = "*.pdf", full.names = TRUE)
if(tidyverse_only == TRUE) {
tidy <- c(paste0(TEMP_PATH, "/", "data-visualization-2.1.pdf"),
paste0(TEMP_PATH, "/", "data-import.pdf"),
paste0(TEMP_PATH, "/", "data-transformation.pdf"),
paste0(TEMP_PATH, "/", "factors.pdf"),
paste0(TEMP_PATH, "/", "lubridate.pdf"),
paste0(TEMP_PATH, "/", "purrr.pdf"),
paste0(TEMP_PATH, "/", "tidyeval.pdf"),
paste0(TEMP_PATH, "/", "strings.pdf")
)
pdfs <- pdfs[pdfs %in% tidy]
}
suppressMessages(
purrr::map(pdfs, fs::file_copy, local_path)
)
fs::dir_delete(TEMP_PATH)
cli::cli_alert_success("Added cheatsheets to {crayon::blue(local_path)}")
if(documented == TRUE) {
cheatsheets <- data.frame(Provider = rep(provider,length(pdfs)),
url = rep(url,length(pdfs)),
cheatsheet = pdfs)
return(cheatsheets)
}
}
urls %>% mapply(FUN = get_cheatsheets,
provider = urls$Provider,
url = urls$url,
tidyverse_only = tidyverse_only,
documented = documented)
load("C:/Users/Josia/Desktop/Coding Projects 2/cheatsheet/data/urls.rda")
urls %>% purrr::map(FUN = get_cheatsheets,
provider = urls$Provider,
url = urls$url,
tidyverse_only = tidyverse_only,
documented = documented)
library(magrittr)
urls %>% purrr::map(FUN = get_cheatsheets,
provider = urls$Provider,
url = urls$url,
tidyverse_only = tidyverse_only,
documented = documented)
get_cheatsheets <- function(local_path = ".", tidyverse_only = FALSE, provider, url, documented = FALSE) {
TEMP_PATH <- paste0(local_path, "/git")
clone_cheats_to_cache(TEMP_PATH, url = url)
pdfs <- list.files(path = TEMP_PATH, pattern = "*.pdf", full.names = TRUE)
if(tidyverse_only == TRUE) {
tidy <- c(paste0(TEMP_PATH, "/", "data-visualization-2.1.pdf"),
paste0(TEMP_PATH, "/", "data-import.pdf"),
paste0(TEMP_PATH, "/", "data-transformation.pdf"),
paste0(TEMP_PATH, "/", "factors.pdf"),
paste0(TEMP_PATH, "/", "lubridate.pdf"),
paste0(TEMP_PATH, "/", "purrr.pdf"),
paste0(TEMP_PATH, "/", "tidyeval.pdf"),
paste0(TEMP_PATH, "/", "strings.pdf")
)
pdfs <- pdfs[pdfs %in% tidy]
}
suppressMessages(
purrr::map(pdfs, fs::file_copy, local_path)
)
fs::dir_delete(TEMP_PATH)
cli::cli_alert_success("Added cheatsheets to {crayon::blue(local_path)}")
if(documented == TRUE) {
cheatsheets <- data.frame(Provider = rep(provider,length(pdfs)),
url = rep(url,length(pdfs)),
cheatsheet = pdfs)
return(cheatsheets)
}
}
get_all_cheatsheets <- function(local_path = ".", tidyverse_only = FALSE, documented = FALSE) {
cheatsheet::urls %>% purrr::map(get_cheatsheets,
provider = urls$Provider,
url = urls$url,
tidyverse_only = tidyverse_only,
documented = documented)
if(documented == TRUE) {
cheatsheets <- data.frame(Provider = rep(provider,length(pdfs)),
url = rep(url,length(pdfs)),
cheatsheet = pdfs)
return(cheatsheets)
}
}
purrr::map(get_cheatsheets,
provider = urls$Provider,
url = urls$url,
tidyverse_only = tidyverse_only,
documented = documented)
